<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Log In</title>
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">
   <link rel="stylesheet" href="/styles/authentication.css">
   <script src="https://kit.fontawesome.com/b781edffa7.js" crossorigin="anonymous"></script>
   <script type="module" src="/js/live_form_validation.js" defer></script>
</head>

<body>
   <div class="log-in-auth-container auth-container">
      <div class="auth-header">
         <div class="app-logo-image-container">
            <img class="app-logo-image" src="/assets/imgs/logo_big.png" alt="app logo">
         </div>
         <div class="welcome-message-container">
            <p class="welcome-message">Welcome to <b>Career Sphere!</b></p>
         </div>
      </div>
      <div class="auth-main-content">
         <h1 class="main-content-message">Sign in to your account</h1>
         <form id="loginForm" class="login-form" novalidate>
            <div class="log-in-main-content-inputs-container">
               <div class="text-input-field-container email-container">
                  <i class="input-icon fa-solid fa-envelope"></i>
                  <input name="email" class="text-input-field" id="emailInput" type="email" placeholder="Email"
                     required onkeyup="validateEmail()" value="<%= email %>">
                  <i class="fas fa-check-circle"></i>
                  <i class="fas fa-exclamation-circle"></i>
                  <div class="error-message"></div>
               </div>
               <div class="text-input-field-container password-container">
                  <i class="input-icon fa-solid fa-lock"></i>
                  <input name="password" class="text-input-field" id="passwordInput" type="password" placeholder="Password"
                     required onkeyup="validatePassword()" value="<%= password %>">
                  <i class="fas fa-check-circle"></i>
                  <i class="fas fa-exclamation-circle"></i>
                  <div class="error-message"></div>
               </div>
            </div>
            <div class="forgot-password-message-container">
               <p>Forgot Password? <a href="#">Click Here</a></p>
            </div>
            <div class="submit-button-container">
               <button id="submit-button" class="submit-button" type="submit" >Log In</button>
            </div>
            <% if (error) { %>
               <div class="submition-error-message-container">
                  <p class="sumbition-error-message"><%= error %></p>
               </div>
            <% } %>
         </form>
      </div>
      <div class="auth-footer">
         <div class="alternative-container">
            <p>You don't have an account? <a href="signup">Sign Up</a></p>
         </div>
      </div>
   </div>
   <script>

      const EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;


      function setError(element, message) {
   
         const inputField = element.parentElement;
         const errorDisplay = inputField.querySelector('.error-message');

         // Display error message and update styles
         errorDisplay.innerText = message;
         inputField.classList.add('error');
         inputField.classList.remove('success');

         // Hide success symbol, show error symbol
         const successSymbolElement = element.nextElementSibling;
         const errorSymbolElement = element.nextElementSibling.nextElementSibling;

         successSymbolElement.style.visibility = 'hidden';
         errorSymbolElement.style.visibility = 'visible';

      }

      function setSuccess(element) {

         const inputField = element.parentElement;
         const errorDisplay = inputField.querySelector('.error-message');

         // Clear error message and update styles
         errorDisplay.innerText = '';
         inputField.classList.add('success');
         inputField.classList.remove('error');

         // Show success symbol, hide error symbol
         const successSymbolElement = element.nextElementSibling;
         const errorSymbolElement = element.nextElementSibling.nextElementSibling;

         successSymbolElement.style.visibility = 'visible';
         errorSymbolElement.style.visibility = 'hidden';

      }

      document.addEventListener('DOMContentLoaded', function() {

         const form = document.getElementById('loginForm');

         form.addEventListener('submit', async function(event) {

            event.preventDefault();
            let validData = true;

            const emailElement = document.getElementById('emailInput');
            const passwordElement = document.getElementById('passwordInput');

            const emailValue = emailElement.value.trim();
            const passwordValue = passwordElement.value.trim();
            
            if (emailValue === '') {
               setError(emailElement, 'Email is required');
               validData = false;
            } else if (!EMAIL_REGEX.test(String(emailValue).toLowerCase())) {
               setError(emailElement, 'Provide a valid email address');
               validData = false;
            } else {
               setSuccess(emailElement);
            }

            if (passwordValue === '') {
               setError(passwordElement, 'Password is required');
               validData = false;
            } else if (passwordValue.length < 8) {
               setError(passwordElement, 'Password must be at least 8 characters');
               validData = false;
            } else {
               setSuccess(passwordElement);
            }

            if (!validData) {
               return;
            }

            const formData = {
               email: emailValue,
               password: passwordValue
            };

            try {

               const response = await fetch('/api/connect_to_account', {
                  method: 'POST',
                  headers: {'Content-Type': 'application/json'},
                  body: JSON.stringify(formData)
               });

               if (response.ok) {
                  const result = await response.json();
                  window.location.href = `/home/${result.userID}`;
               }
               else {
                  const result = await response.json();
                  
                  window.location.reload();
               }
               


            } catch (error) {
               console.error('Error:', error);
               alert('Error submitting form');
            }

         });

      });

   </script>
   <script>

      document.querySelectorAll(".text-input-field-container").forEach(container => {
         container.addEventListener("click", function () {
            this.querySelector('.text-input-field').focus();
         });
      });

   </script>
</body>

</html>
